// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_image_2eproto__INCLUDED
#define PROTOBUF_image_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_image_2eproto();
void protobuf_AssignDesc_image_2eproto();
void protobuf_ShutdownFile_image_2eproto();

class Image;
class Image_Resolution;
class Image_GeoLocation;

// ===================================================================

class Image_Resolution : public ::google::protobuf::Message {
 public:
  Image_Resolution();
  virtual ~Image_Resolution();

  Image_Resolution(const Image_Resolution& from);

  inline Image_Resolution& operator=(const Image_Resolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image_Resolution& default_instance();

  void Swap(Image_Resolution* other);

  // implements Message ----------------------------------------------

  Image_Resolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image_Resolution& from);
  void MergeFrom(const Image_Resolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:data.Image.Resolution)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_image_2eproto();
  friend void protobuf_AssignDesc_image_2eproto();
  friend void protobuf_ShutdownFile_image_2eproto();

  void InitAsDefaultInstance();
  static Image_Resolution* default_instance_;
};
// -------------------------------------------------------------------

class Image_GeoLocation : public ::google::protobuf::Message {
 public:
  Image_GeoLocation();
  virtual ~Image_GeoLocation();

  Image_GeoLocation(const Image_GeoLocation& from);

  inline Image_GeoLocation& operator=(const Image_GeoLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image_GeoLocation& default_instance();

  void Swap(Image_GeoLocation* other);

  // implements Message ----------------------------------------------

  Image_GeoLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image_GeoLocation& from);
  void MergeFrom(const Image_GeoLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lng = 2;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 2;
  inline double lng() const;
  inline void set_lng(double value);

  // optional double alt = 4;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 4;
  inline double alt() const;
  inline void set_alt(double value);

  // @@protoc_insertion_point(class_scope:data.Image.GeoLocation)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_alt();
  inline void clear_has_alt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double lat_;
  double lng_;
  double alt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_image_2eproto();
  friend void protobuf_AssignDesc_image_2eproto();
  friend void protobuf_ShutdownFile_image_2eproto();

  void InitAsDefaultInstance();
  static Image_GeoLocation* default_instance_;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void Swap(Image* other);

  // implements Message ----------------------------------------------

  Image* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Image_Resolution Resolution;
  typedef Image_GeoLocation GeoLocation;

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required uint32 node_id = 2;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 node_id() const;
  inline void set_node_id(::google::protobuf::uint32 value);

  // required string user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // required string name = 10;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 10;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string mime = 11;
  inline bool has_mime() const;
  inline void clear_mime();
  static const int kMimeFieldNumber = 11;
  inline const ::std::string& mime() const;
  inline void set_mime(const ::std::string& value);
  inline void set_mime(const char* value);
  inline void set_mime(const char* value, size_t size);
  inline ::std::string* mutable_mime();
  inline ::std::string* release_mime();
  inline void set_allocated_mime(::std::string* mime);

  // required string desc = 12;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 12;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required uint64 length = 13;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 13;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // required uint64 datetime = 14;
  inline bool has_datetime() const;
  inline void clear_datetime();
  static const int kDatetimeFieldNumber = 14;
  inline ::google::protobuf::uint64 datetime() const;
  inline void set_datetime(::google::protobuf::uint64 value);

  // required .data.Image.Resolution size = 15;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 15;
  inline const ::data::Image_Resolution& size() const;
  inline ::data::Image_Resolution* mutable_size();
  inline ::data::Image_Resolution* release_size();
  inline void set_allocated_size(::data::Image_Resolution* size);

  // optional .data.Image.Resolution original_size = 20;
  inline bool has_original_size() const;
  inline void clear_original_size();
  static const int kOriginalSizeFieldNumber = 20;
  inline const ::data::Image_Resolution& original_size() const;
  inline ::data::Image_Resolution* mutable_original_size();
  inline ::data::Image_Resolution* release_original_size();
  inline void set_allocated_original_size(::data::Image_Resolution* original_size);

  // optional .data.Image.GeoLocation geo_location = 21;
  inline bool has_geo_location() const;
  inline void clear_geo_location();
  static const int kGeoLocationFieldNumber = 21;
  inline const ::data::Image_GeoLocation& geo_location() const;
  inline ::data::Image_GeoLocation* mutable_geo_location();
  inline ::data::Image_GeoLocation* release_geo_location();
  inline void set_allocated_geo_location(::data::Image_GeoLocation* geo_location);

  // optional uint64 original_datetime = 22;
  inline bool has_original_datetime() const;
  inline void clear_original_datetime();
  static const int kOriginalDatetimeFieldNumber = 22;
  inline ::google::protobuf::uint64 original_datetime() const;
  inline void set_original_datetime(::google::protobuf::uint64 value);

  // optional uint64 upload_datetime = 23;
  inline bool has_upload_datetime() const;
  inline void clear_upload_datetime();
  static const int kUploadDatetimeFieldNumber = 23;
  inline ::google::protobuf::uint64 upload_datetime() const;
  inline void set_upload_datetime(::google::protobuf::uint64 value);

  // optional bytes data = 255;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 255;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:data.Image)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_node_id();
  inline void clear_has_node_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mime();
  inline void clear_has_mime();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_datetime();
  inline void clear_has_datetime();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_original_size();
  inline void clear_has_original_size();
  inline void set_has_geo_location();
  inline void clear_has_geo_location();
  inline void set_has_original_datetime();
  inline void clear_has_original_datetime();
  inline void set_has_upload_datetime();
  inline void clear_has_upload_datetime();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* user_id_;
  ::std::string* name_;
  ::std::string* mime_;
  ::std::string* desc_;
  ::google::protobuf::uint64 length_;
  ::google::protobuf::uint64 datetime_;
  ::data::Image_Resolution* size_;
  ::data::Image_Resolution* original_size_;
  ::data::Image_GeoLocation* geo_location_;
  ::google::protobuf::uint64 original_datetime_;
  ::google::protobuf::uint64 upload_datetime_;
  ::std::string* data_;
  ::google::protobuf::uint32 node_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_image_2eproto();
  friend void protobuf_AssignDesc_image_2eproto();
  friend void protobuf_ShutdownFile_image_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// ===================================================================


// ===================================================================

// Image_Resolution

// required uint32 width = 1;
inline bool Image_Resolution::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image_Resolution::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image_Resolution::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image_Resolution::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Image_Resolution::width() const {
  return width_;
}
inline void Image_Resolution::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// required uint32 height = 2;
inline bool Image_Resolution::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image_Resolution::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image_Resolution::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image_Resolution::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Image_Resolution::height() const {
  return height_;
}
inline void Image_Resolution::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// Image_GeoLocation

// required double lat = 1;
inline bool Image_GeoLocation::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image_GeoLocation::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image_GeoLocation::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image_GeoLocation::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double Image_GeoLocation::lat() const {
  return lat_;
}
inline void Image_GeoLocation::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// required double lng = 2;
inline bool Image_GeoLocation::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image_GeoLocation::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image_GeoLocation::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image_GeoLocation::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline double Image_GeoLocation::lng() const {
  return lng_;
}
inline void Image_GeoLocation::set_lng(double value) {
  set_has_lng();
  lng_ = value;
}

// optional double alt = 4;
inline bool Image_GeoLocation::has_alt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image_GeoLocation::set_has_alt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image_GeoLocation::clear_has_alt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image_GeoLocation::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline double Image_GeoLocation::alt() const {
  return alt_;
}
inline void Image_GeoLocation::set_alt(double value) {
  set_has_alt();
  alt_ = value;
}

// -------------------------------------------------------------------

// Image

// required string id = 1;
inline bool Image::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Image::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Image::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Image::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Image::id() const {
  return *id_;
}
inline void Image::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Image::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Image::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Image::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 node_id = 2;
inline bool Image::has_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Image::set_has_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Image::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Image::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
inline ::google::protobuf::uint32 Image::node_id() const {
  return node_id_;
}
inline void Image::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
}

// required string user_id = 3;
inline bool Image::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Image::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Image::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Image::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& Image::user_id() const {
  return *user_id_;
}
inline void Image::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Image::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void Image::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* Image::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 10;
inline bool Image::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Image::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Image::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Image::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Image::name() const {
  return *name_;
}
inline void Image::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Image::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Image::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mime = 11;
inline bool Image::has_mime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Image::set_has_mime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Image::clear_has_mime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Image::clear_mime() {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    mime_->clear();
  }
  clear_has_mime();
}
inline const ::std::string& Image::mime() const {
  return *mime_;
}
inline void Image::set_mime(const ::std::string& value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void Image::set_mime(const char* value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void Image::set_mime(const char* value, size_t size) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_mime() {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  return mime_;
}
inline ::std::string* Image::release_mime() {
  clear_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mime_;
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_mime(::std::string* mime) {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_;
  }
  if (mime) {
    set_has_mime();
    mime_ = mime;
  } else {
    clear_has_mime();
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string desc = 12;
inline bool Image::has_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Image::set_has_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Image::clear_has_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Image::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Image::desc() const {
  return *desc_;
}
inline void Image::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Image::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Image::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* Image::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 length = 13;
inline bool Image::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Image::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Image::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Image::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 Image::length() const {
  return length_;
}
inline void Image::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// required uint64 datetime = 14;
inline bool Image::has_datetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Image::set_has_datetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Image::clear_has_datetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Image::clear_datetime() {
  datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_datetime();
}
inline ::google::protobuf::uint64 Image::datetime() const {
  return datetime_;
}
inline void Image::set_datetime(::google::protobuf::uint64 value) {
  set_has_datetime();
  datetime_ = value;
}

// required .data.Image.Resolution size = 15;
inline bool Image::has_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Image::set_has_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Image::clear_has_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Image::clear_size() {
  if (size_ != NULL) size_->::data::Image_Resolution::Clear();
  clear_has_size();
}
inline const ::data::Image_Resolution& Image::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::data::Image_Resolution* Image::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::data::Image_Resolution;
  return size_;
}
inline ::data::Image_Resolution* Image::release_size() {
  clear_has_size();
  ::data::Image_Resolution* temp = size_;
  size_ = NULL;
  return temp;
}
inline void Image::set_allocated_size(::data::Image_Resolution* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
}

// optional .data.Image.Resolution original_size = 20;
inline bool Image::has_original_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Image::set_has_original_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Image::clear_has_original_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Image::clear_original_size() {
  if (original_size_ != NULL) original_size_->::data::Image_Resolution::Clear();
  clear_has_original_size();
}
inline const ::data::Image_Resolution& Image::original_size() const {
  return original_size_ != NULL ? *original_size_ : *default_instance_->original_size_;
}
inline ::data::Image_Resolution* Image::mutable_original_size() {
  set_has_original_size();
  if (original_size_ == NULL) original_size_ = new ::data::Image_Resolution;
  return original_size_;
}
inline ::data::Image_Resolution* Image::release_original_size() {
  clear_has_original_size();
  ::data::Image_Resolution* temp = original_size_;
  original_size_ = NULL;
  return temp;
}
inline void Image::set_allocated_original_size(::data::Image_Resolution* original_size) {
  delete original_size_;
  original_size_ = original_size;
  if (original_size) {
    set_has_original_size();
  } else {
    clear_has_original_size();
  }
}

// optional .data.Image.GeoLocation geo_location = 21;
inline bool Image::has_geo_location() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Image::set_has_geo_location() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Image::clear_has_geo_location() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Image::clear_geo_location() {
  if (geo_location_ != NULL) geo_location_->::data::Image_GeoLocation::Clear();
  clear_has_geo_location();
}
inline const ::data::Image_GeoLocation& Image::geo_location() const {
  return geo_location_ != NULL ? *geo_location_ : *default_instance_->geo_location_;
}
inline ::data::Image_GeoLocation* Image::mutable_geo_location() {
  set_has_geo_location();
  if (geo_location_ == NULL) geo_location_ = new ::data::Image_GeoLocation;
  return geo_location_;
}
inline ::data::Image_GeoLocation* Image::release_geo_location() {
  clear_has_geo_location();
  ::data::Image_GeoLocation* temp = geo_location_;
  geo_location_ = NULL;
  return temp;
}
inline void Image::set_allocated_geo_location(::data::Image_GeoLocation* geo_location) {
  delete geo_location_;
  geo_location_ = geo_location;
  if (geo_location) {
    set_has_geo_location();
  } else {
    clear_has_geo_location();
  }
}

// optional uint64 original_datetime = 22;
inline bool Image::has_original_datetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Image::set_has_original_datetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Image::clear_has_original_datetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Image::clear_original_datetime() {
  original_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_original_datetime();
}
inline ::google::protobuf::uint64 Image::original_datetime() const {
  return original_datetime_;
}
inline void Image::set_original_datetime(::google::protobuf::uint64 value) {
  set_has_original_datetime();
  original_datetime_ = value;
}

// optional uint64 upload_datetime = 23;
inline bool Image::has_upload_datetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Image::set_has_upload_datetime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Image::clear_has_upload_datetime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Image::clear_upload_datetime() {
  upload_datetime_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_datetime();
}
inline ::google::protobuf::uint64 Image::upload_datetime() const {
  return upload_datetime_;
}
inline void Image::set_upload_datetime(::google::protobuf::uint64 value) {
  set_has_upload_datetime();
  upload_datetime_ = value;
}

// optional bytes data = 255;
inline bool Image::has_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Image::set_has_data() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Image::clear_has_data() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Image::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Image::data() const {
  return *data_;
}
inline void Image::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Image::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Image::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Image::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Image::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_2eproto__INCLUDED
